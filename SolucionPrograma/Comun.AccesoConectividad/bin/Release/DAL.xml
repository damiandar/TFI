<?xml version="1.0"?>
<doc>
<assembly>
<name>
DAL
</name>
</assembly>
<members>
<member name="M:DALPedido.InsertarPedido(Pedido)">
	<summary>
 Ingresa un nuevo pedido para la campaña
 </summary>
	<param name="unPedido"></param>
	<remarks></remarks>
</member><member name="M:DALPedido.MostrarListadoPedidos(System.Int32,System.Int32)">
	<summary>
 Muestra todos los pedidos por DNI y Campaña
 </summary>
	<param name="DNI"></param>
	<param name="Campania"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:My.Resources.Resources.ResourceManager">
	<summary>
  Devuelve la instancia de ResourceManager almacenada en caché utilizada por esta clase.
</summary>
</member><member name="P:My.Resources.Resources.Culture">
	<summary>
  Reemplaza la propiedad CurrentUICulture del subproceso actual para todas las
  búsquedas de recursos mediante esta clase de recurso con establecimiento inflexible de tipos.
</summary>
</member><member name="T:My.Resources.Resources">
	<summary>
  Clase de recurso con establecimiento inflexible de tipos, para buscar cadenas traducidas, etc.
</summary>
</member><member name="M:DALCtaCte.InsertarCtaCte(System.Int32)">
	<summary>
 Inserta una cuenta corriente del cliente creado
 </summary>
	<param name="DNI"></param>
	<remarks></remarks>
</member><member name="M:DALCtaCte.MostrarDeuda(System.Int32)">
	<summary>
 Muestra el monto de la deuda del cliente
 </summary>
	<param name="DNI"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:DALCtaCte.ActualizarDeuda(System.Int32,System.Double)">
	<summary>
 Actualiza la cuenta corriente del cliente cada vez que se realiza una factura.
 </summary>
	<param name="DNI"></param>
	<param name="Monto"></param>
	<remarks></remarks>
</member><member name="M:DALProvincia.MuestraListado">
	<summary>
 Muestra el listado de todas las preguntas.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:DALCliente.Insertar(Cliente)">
	<summary>
 Crea un cliente en el sistema.
 </summary>
	<param name="UnCliente"></param>
	<remarks></remarks>
</member><member name="M:DALCliente.Modifica(Cliente)">
	<summary>
 Modifica los datos de un cliente del sistema.
 </summary>
	<param name="UnCliente"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:DALCliente.Elimina(System.Int32)">
	<summary>
 Da la baja logica de un cliente en el sistema.
 </summary>
	<param name="DNI"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:DALCliente.MuestraListado">
	<summary>
 Muestra el listado de clientes dentro del sistema.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:DALCliente.MuestraUnCliente(System.Int32)">
	<summary>
 Muestra un cliente que tenga ese DNI.
 </summary>
	<param name="DNI"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Conector.MostrarDataTable(System.String,System.Data.SqlClient.SqlParameter[])">
	<summary>
 Muestra Un datatable
 </summary>
	<param name="consulta"></param>
	<param name="parametros"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Conector.EjecutarComando(System.String,System.Data.SqlClient.SqlParameter[])">
	<summary>
 Devuelve el número de filas afectadas. Usted puede utilizar el ExecuteNonQuery para realizar operaciones de catálogo (por ejemplo, consultar la estructura de una base de datos o crear objetos como tablas de base de datos), o para cambiar los datos en una base de datos sin necesidad de utilizar un conjunto de datos mediante la ejecución de UPDATE, INSERT o DELETE. 
 Aunque el ExecuteNonQuery no devuelve ninguna fila, los parámetros de salida o los valores devueltos asignados a los parámetros se rellenan con datos. 
 Para UPDATE, INSERT y DELETE, el valor de retorno es el número de filas afectadas por el comando. 
 Cuando existe un desencadenante en una tabla que se está insertado o actualizado, el valor de retorno incluye el número de filas afectadas tanto por la inserción o operación de actualización y el número de filas afectadas por el gatillo o desencadenantes. 
 Para todos los demás tipos de instrucciones, el valor devuelto es -1. Si se produce un rollback, el valor de retorno es también -1.
 </summary>
	<param name="consulta"></param>
	<param name="parametros"></param>
	<returns>Devuelve el número de filas afectadas.</returns>
	<remarks></remarks>
</member><member name="M:Conector.EjecutarScalar(System.String,System.Data.SqlClient.SqlParameter[])">
	<summary>
 Ejecuta la consulta y devuelve la primera columna de la primera fila del conjunto de resultados devuelto por la consulta. 
 Columnas o filas adicionales se ignoran. 
 La primera columna de la primera fila del conjunto de resultados, o una referencia nula (Nothing en Visual Basic) si el conjunto de resultados está vacío. 
 Devuelve un máximo de 2033 caracteres. 
 Utilice el método EjecutarScalar para recuperar un único valor (por ejemplo, un valor agregado) de una base de datos. 
 Esto requiere menos código que utilizar el método MostrarDataTable y, a continuación, realizar las operaciones que usted necesita para generar el valor de un solo uso de los datos devueltos por un SqlDataReader.
 </summary>
	<param name="consulta"></param>
	<param name="parametros"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Conector.GuardarBackUp(System.String)">
	<summary>
 Ejecuta consulta de backup
 </summary>
	<param name="Ruta"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:DALStock.InsertarStock(System.Int32,Stock)">
	<summary>
 Inserta el stock del producto recien ingresado.
 </summary>
	<param name="idProducto"></param>
	<param name="unStock"></param>
	<remarks></remarks>
</member><member name="M:DALStock.ActualizarStock(System.Int32,Stock)">
	<summary>
 Actualiza el stock de un producto determinado.
 </summary>
	<param name="idProducto"></param>
	<param name="UnStock"></param>
	<remarks></remarks>
</member><member name="M:DALStock.MostrarStockProducto(System.Int32)">
	<summary>
 Stock de un producto
 </summary>
	<param name="IdProducto"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:DALCampania.MostrarCampaniaActual">
	<summary>
 Obtiene la campaña actual, si no hay ninguna activa devuelve 0.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:DALCampania.CerrarCampaniaActual(System.Int32)">
	<summary>
 Cierra la campaña actual.
 </summary>
	<param name="campania"></param>
	<remarks></remarks>
</member><member name="M:DALCampania.MostrarListadoCampania">
	<summary>
 Muestra el listado de campañas.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:DALCampania.MostrarCampaniaAnterior">
	<summary>
 Muestra la campaña anterior, se calcula la anterior por la fecha de cierre.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:DALCampania.AbrirCampania(System.Int32)">
	<summary>
 Se crea una nueva campaña.
 </summary>
	<param name="campania"></param>
	<remarks></remarks>
</member>
</members>
</doc>